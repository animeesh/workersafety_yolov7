import argparse
import time
import numpy as np
import telepot
from pathlib import Path
import cv2
import torch
import torch.backends.cudnn as cudnn
from numpy import random

from models.experimental import attempt_load
from utils.datasets import LoadStreams, LoadImages
from utils.general import check_img_size, check_requirements, \
                check_imshow, non_max_suppression, apply_classifier, \
                scale_coords, xyxy2xywh, strip_optimizer, set_logging, \
                increment_path
from utils.plots import plot_one_box
from utils.torch_utils import select_device, load_classifier, time_synchronized, TracedModel

#For SORT tracking
import skimage
from sort import *
#............................... Telegram crediential .........................
token = "5359624864:AAEvkmg7JPaeQYTUDG3kpIx8u50D3vyOkw4"
receiver_id = "1171288906"
bot = telepot.Bot(token)
bot.sendMessage(receiver_id, "Your Camera is activated")

#............................... setup details .........................
camera = 0 # webcam
path= "/Users/animeshkumarnayak/Downloads/yolov7-object-tracking/img"
#weights = "weights/worker.pt"
weights="best_face.pt"
device = torch.device("cpu")

model=attempt_load (weights,map_location=device)
stride=int(model.stride.max())
cudnn.benchmark = True

cap = cv2.VideoCapture(camera)
width,height = (352,288)
display = True
"""cap.set(3,width)
cap.set(4,height)"""

while (cap.isOpened()):
    time.sleep(0.2)  # wait for 0.2 second
    ret, frame_ = cap.read()
    frame = cv2.resize(frame_, (width, height), interpolation=cv2.INTER_AREA)

    if display:
        cv2.imshow("frame", frame)
        if cv2.waitKey(25) & 0xFF == ord('q'):
            break

    if ret == True:
        img = torch.from_numpy(frame).float().to(device).permute(2, 0, 1)
        img /= 255.0  # 0 - 255 to 0.0 - 1.0

        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        pred = model(img, augment=False)[0]
        pred = non_max_suppression(pred, 0.39, 0.45, agnostic=True)  # img, conf, iou, ...

        for det in pred:
            if len(det):
                conf_, class_ = det[0][4], int(det[0][5])

                if class_ == 0 and conf_ > 0.35:
                    time_stamp = int(time.time())
                    fcm_photo = f'img/{time_stamp}.png'
                    cv2.imwrite(fcm_photo, frame_)  # notification photo
                    bot.sendPhoto(receiver_id, photo=open(fcm_photo, 'rb'))  # send message to telegram
                    print(f'{time_stamp}.png has sent.')
                    time.sleep(1)  # wait for 1 second. Only when it detects.
    else:
        break

cap.release()
cv2.destroyAllWindows()


















